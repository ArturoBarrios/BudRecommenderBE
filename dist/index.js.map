{"version":3,"sources":["../src/index.ts","../src/routes/strains.js","../src/services/recommendStrains.js","../src/services/vectorSearch.js","../src/services/embedStrains.js","../src/resolvers/resolvers.ts","../src/routes/userAuth.js"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config(); \n\nimport express from 'express';\nimport cors from 'cors';\nimport { ApolloServer } from '@apollo/server';\nimport { expressMiddleware } from '@apollo/server/express4';\nimport { readFileSync } from 'fs';\nimport gql from 'graphql-tag';\nimport { buildSubgraphSchema } from '@apollo/subgraph';\nimport strainsRoutes from './routes/strains.js';\nimport { resolvers } from './resolvers/resolvers.js';\nimport path from 'path';\nimport userAuthRouter from '../src/routes/userAuth.js';\nimport session from 'express-session';\n\nconst app = express();\nconst PORT = 4000;\n\n\n\n// Middleware\napp.use(cors({\n  origin: 'http://localhost:3000', // adjust if Nuxt is hosted elsewhere\n  credentials: true\n}));\napp.use(\n  session({\n    name: 'sid',\n    secret: process.env.SESSION_SECRET || 'your-super-secret-with-32-chars',\n    resave: true, // <--- force session save on every response\n    saveUninitialized: true, // <--- create session even if nothing set yet\n    cookie: {\n      httpOnly: true,\n      secure: false, // true in production w/ HTTPS\n      maxAge: 1000 * 60 * 60 * 24, // 1 day\n    },\n  })\n);\n\napp.use(express.json());\napp.use('/strains', strainsRoutes);\napp.use('/auth', userAuthRouter);\n\n// Load schema and create server\nconst typeDefs = gql(readFileSync(new URL('./schema.graphql', import.meta.url), 'utf8'));\n\n\nconst server = new ApolloServer({\n  schema: buildSubgraphSchema({ typeDefs, resolvers }),\n});\n\nawait server.start();\n\napp.use('/graphql', expressMiddleware(server, {\n  context: async ({ req, res }) => ({ req, res }),\n}));\n\napp.listen(PORT, () => {\n  console.log(`🚀 GraphQL server ready at http://localhost:${PORT}/graphql`);\n  console.log(`📦 Strains routes ready`);\n});\n","import { Router } from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { recommendStrains } from '../services/recommendStrains.js';\nimport { embedStrainsFromAPI } from '../services/embedStrains.js';\n\nconst prisma = new PrismaClient();\nconst router = Router();\n\nrouter.get('/embed-strains', async (req, res) => {\n  try {\n    console.log('📦 Embedding strains from API...');\n    await embedStrainsFromAPI();\n    console.log('✅ Embedding completed.');\n    res.json({ success: true, message: 'Strains embedded and saved.' });\n  } catch (err) {\n    console.error('❌ Error during embedding:', err);\n    res.status(500).json({ success: false, error: 'Embedding failed' });\n  }\n});\n\nrouter.post('/create-strains', async (req, res) => {\n  const { storeName, strains } = req.body;\n  console.log(`📥 Creating strains for store: ${storeName}`);\n\n  try {\n    let store = await prisma.store.findFirst({ where: { name: storeName } });\n    if (!store) {\n      console.log('🏪 Store not found, creating new store');\n      store = await prisma.store.create({ data: { name: storeName } });\n    }\n\n    const createdStrains = [];\n\n    for (const s of strains) {\n  console.log(`🌿 Creating strain: ${s.name}`);\n\n  if (!s.brand || typeof s.brand !== \"string\") {\n    throw new Error(`Missing or invalid brand for strain: ${s.name}`);\n  }\n\n  const brandName = s.brand.trim();\n  let brand = await prisma.brand.findUnique({ where: { name: brandName } });\n\n  if (!brand) {\n    console.log('🏷️ Creating new brand:', brandName);\n    brand = await prisma.brand.create({\n      data: { name: brandName },\n    });\n  }\n\nlet strain = await prisma.strain.findUnique({ where: { name: s.name } });\nif (!strain) {\n  strain = await prisma.strain.create({\n    data: {\n      name: s.name,\n      url: s.url,\n      thc: parseFloat(s.thc),\n      weight: Array.isArray(s.weight) ? s.weight : [s.weight],\n      price: Array.isArray(s.price) ? s.price : [s.price],\n      strainType: s.strain_type,\n      brand: {\n        connect: { id: brand.id },\n      },\n    },\n  });\n}\n\nawait prisma.strainStore.create({\n  data: {\n    strainId: strain.id,\n    storeId: store.id,\n    offer: s.offer || null,\n  },\n});\n\n\n  for (const [terpeneName, raw] of Object.entries(s.terpenes ?? {})) {\n    console.log(`🧪 Processing terpene: ${terpeneName}`);\n    let terpene = await prisma.terpene.findUnique({ where: { name: terpeneName } });\n    if (!terpene) {\n      console.log('🆕 Creating new terpene:', terpeneName);\n      terpene = await prisma.terpene.create({\n        data: {\n          name: terpeneName,\n          description: '',\n        },\n      });\n    }\n\n    const clean = raw.toLowerCase().replace('%', '').replace('mg/g', '').trim();\n    const isMg = raw.toLowerCase().includes('mg/g');\n    const percentage = parseFloat(clean);\n\n    await prisma.strainTerpene.create({\n      data: {\n        strainId: strain.id,\n        terpeneId: terpene.id,\n        percentage: isMg ? percentage / 10 : percentage,\n      },\n    });\n  }\n\n  createdStrains.push(strain);\n}\n\n\n    console.log(`✅ Created ${createdStrains.length} strains.`);\n    res.status(201).json({ success: true, strains: createdStrains });\n  } catch (err) {\n    console.error('❌ Error creating strains:', err);\n    res.status(500).json({ success: false, error: 'Failed to create strains' });\n  }\n});\n\n\n\nrouter.post('/recommend', async (req, res) => {\n  try {\n    const { strainType, thcTier, priceTier, weight, mood, text } = req.body;\n\n    const parts = [];\n\n    if (strainType) parts.push(`a ${strainType}`);\n    if (thcTier) {\n      if (thcTier === 'low') parts.push('low THC');\n      else if (thcTier === 'mid') parts.push('moderate THC');\n      else if (thcTier === 'high') parts.push('high THC');\n    }\n    if (priceTier) {\n      if (priceTier === 'low') parts.push('under $30');\n      else if (priceTier === 'mid') parts.push('around $30-$60');\n      else if (priceTier === 'high') parts.push('premium pricing');\n    }\n    if (weight) parts.push(`weighing around ${weight}`);\n    if (mood) parts.push(`for a ${mood} mood`);\n    if (text) parts.push(text);\n\n    const userQuery = `I'm looking for ${parts.join(', ')}`;\n\n    console.log(`🤖 Recommending strains for query: \"${userQuery}\"`);\n    const recommendations = await recommendStrains(userQuery);\n\n    res.json({\n      success: true,\n      recommendations,\n    });\n  } catch (err) {\n    console.error('❌ Error recommending strains:', err);\n    res.status(500).json({ success: false, error: 'Failed to fetch recommendations' });\n  }\n});\n\n\nrouter.get('/get-strains', async (req, res) => {\n  try {\n    console.log('📡 Fetching strains from database...');\n    const strains = await prisma.strain.findMany({\n  include: {\n    brand: {\n      select: { id: true, name: true },\n    },\n    strainTerpenes: {\n      include: {\n        terpene: {\n          select: { id: true, name: true, description: true },\n        },\n      },\n    },\n    strainStores: {\n      include: {\n        store: {\n          select: { id: true, name: true },\n        },\n      },\n    },\n  },\n});\n\n\n    const formatted = strains.map((s) => ({\n  id: s.id,\n  name: s.name,\n  url: s.url,\n  thc: s.thc,\n  weight: s.weight,\n  price: s.price,\n  strainType: s.strainType,\n  brand: s.brand,\n  terpenes: s.strainTerpenes.map((st) => ({\n    id: st.terpene.id,\n    name: st.terpene.name,\n    description: st.terpene.description,\n    percentage: st.percentage,\n  })),\n  stores: s.strainStores.map((ss) => ({\n    id: ss.store.id,\n    name: ss.store.name,\n    offer: ss.offer,\n  })),\n}));\n\n\n    console.log(`✅ Returned ${formatted.length} strains.`);\n    res.json(formatted);\n  } catch (err) {\n    console.error('❌ Error fetching strains:', err);\n    res.status(500).json({ success: false, error: 'Failed to fetch strains' });\n  }\n});\n\nfunction extractStrainName(url) {\n  const parts = url.split('/');\n  const slug = parts[parts.length - 1];\n  return slug.replace(/[-_]/g, ' ').replace(/\\d+(\\.\\d+)?g/g, '').trim();\n}\n\nexport default router;\n","import { OpenAI } from 'openai';\nimport { getTopMatches } from './vectorSearch.js';\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function recommendStrains(userQuery) {\n  console.log('🤖 Starting recommendation process...');\n  console.log(`📝 User query: \"${userQuery}\"`);\n\n  const embeddingRes = await openai.embeddings.create({\n    model: 'text-embedding-3-small',\n    input: userQuery,\n  });\n\n  console.log('🧠 Embedding generated.');\n\n  const queryEmbedding = embeddingRes.data[0].embedding;\n  const topStrains = getTopMatches(queryEmbedding, 5);\n\n  console.log('🌿 Top matching strains:');\n  topStrains.forEach((s, i) => {\n    console.log(`  ${i + 1}. ${s.name} - ${s.strainType}, ${s.thc}% THC, ${s.weight}, ${s.price}`);\n  });\n\n  const prompt = `\nA user wants cannabis for: \"${userQuery}\".\nHere are some strains that might match:\n\n${topStrains.map((s, i) => \n  `${i + 1}. ${s.name} - ${s.strainType}, ${s.thc}% THC, ${s.weight}, ${s.price}`\n).join('\\n')}\n\nChoose the best 3 and explain why.\nFormat as:\n[\n  { \"name\": \"Strain\", \"reason\": \"...\" },\n  ...\n]\n`;\n\n  console.log('✍️ Sending prompt to OpenAI:');\n  console.log(prompt);\n\n  const response = await openai.chat.completions.create({\n    model: 'gpt-4',\n    messages: [{ role: 'user', content: prompt }],\n  });\n\n  console.log('📩 Response received from OpenAI:');\n  console.log(response.choices[0].message.content);\n\n  return response.choices[0].message.content;\n}\n","import fs from 'fs';\n\nfunction cosineSim(a, b) {\n  const dot = a.reduce((sum, val, i) => sum + val * b[i], 0);\n  const magA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));\n  const magB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));\n  return dot / (magA * magB);\n}\n\nexport function getTopMatches(queryEmbedding, k = 5) {\n  const embeddedStrains = JSON.parse(fs.readFileSync('./embeddedStrains.json', 'utf-8'));\n\n  const scored = embeddedStrains.map((strain) => ({\n    ...strain,\n    similarity: cosineSim(queryEmbedding, strain.embedding),\n  }));\n\n  return scored.sort((a, b) => b.similarity - a.similarity).slice(0, k);\n}\n","// services/embedStrains.ts\nimport { OpenAI } from 'openai';\nimport fs from 'fs';\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function embedStrainsFromAPI() {\n  const res = await fetch('http://localhost:4000/strains/get-strains'); // native fetch\n  const strains = await res.json();\n\n  const embedded = [];\n\n  for (const strain of strains) {\n    const text = `${strain.name}, ${strain.strainType}, ${strain.thc}% THC, ${strain.weight}, ${strain.price}`;\n    const embeddingRes = await openai.embeddings.create({\n      model: 'text-embedding-3-small',\n      input: text,\n    });\n\n    embedded.push({\n      ...strain,\n      embedding: embeddingRes.data[0].embedding,\n    });\n\n    await new Promise((r) => setTimeout(r, 100)); // avoid rate limit\n  }\n\n  fs.writeFileSync('./embeddedStrains.json', JSON.stringify(embedded, null, 2));\n  console.log('✅ Embedding complete. Saved to embeddedStrains.json');\n}\n","import { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcrypt';\n\nconst prisma = new PrismaClient();\n\nexport const resolvers = {\n    Query: {\n    getStrains: async () => {\n      return await prisma.strain.findMany({\n        include: {\n          stores: true,\n          strainTerpenes: {\n            include: {\n              terpene: true,\n            },\n          },\n        },\n        orderBy: {\n          \n        },\n      });\n    },\n  },\n  Mutation: {\n    createStore: async (_: any, args: { name: string }) => {\n      return await prisma.store.create({\n        data: { name: args.name },\n      });\n    },\n    signup: async (_: any, args: { email: string; password: string }) => {\n      const existing = await prisma.user.findUnique({ where: { email: args.email } });\n      if (existing) {\n        throw new Error('Email already in use.');\n      }\n\n      const hashedPassword = await bcrypt.hash(args.password, 10);\n\n      return await prisma.user.create({\n        data: {\n          email: args.email,\n          password: hashedPassword,\n        },\n      });\n    },\n    login: async (_: any, args: { email: string; password: string }) => {\n      const user = await prisma.user.findUnique({ where: { email: args.email } });\n      if (!user) {\n        throw new Error('Invalid email or password.');\n      }\n\n      const isValid = await bcrypt.compare(args.password, user.password);\n      if (!isValid) {\n        throw new Error('Invalid email or password.');\n      }\n\n      return user;\n    },\n\n    createStrain: async (\n      _: any,\n      args: {\n        name: string;\n        url: string;\n        thc: number;\n        weight: string;\n        price: string;\n        strainType: string;\n        storeIds: string[];\n        terpeneNames: string[];\n        terpenePercentages: number[];\n      }\n    ) => {\n      const strain = await prisma.strain.create({\n        data: {\n          name: args.name,\n          url: args.url,\n          thc: args.thc,\n          weight: args.weight,\n          price: args.price,\n          strainType: args.strainType,\n          stores: {\n            connect: args.storeIds.map(id => ({ id })),\n          },\n        },\n      });\n\n      for (let i = 0; i < args.terpeneNames.length; i++) {\n        const name = args.terpeneNames[i];\n        const percentage = args.terpenePercentages[i];\n\n        let terpene = await prisma.terpene.findUnique({ where: { name } });\n\n        if (!terpene) {\n          terpene = await prisma.terpene.create({\n            data: {\n              name,\n              description: '', // Optional placeholder\n            },\n          });\n        }\n\n        await prisma.strainTerpene.create({\n          data: {\n            strainId: strain.id,\n            terpeneId: terpene.id,\n            percentage,\n          },\n        });\n      }\n\n      return await prisma.strain.findUnique({\n        where: { id: strain.id },\n        include: {\n          stores: true,\n          strainTerpenes: {\n            include: {\n              terpene: true,\n            },\n          },\n        },\n      });\n    },\n  },\n};\n","import { Router } from 'express';\nimport { resolvers } from '../resolvers/resolvers.js';\n\nconst router = Router();\n\nrouter.post('/signup', async (req, res) => {\n  console.log('🔐 User signup attempt:', req.body);\n  const { email, password } = req.body;\n\n  try {\n    const user = await resolvers.Mutation.signup(null, { email, password });\n    console.log('✅ User signed up successfully:', user.email);\n\n    req.session.user = {\n      id: user.id,\n      email: user.email,\n      name: user.name || null,\n    };\n\n    req.session.save(() => {\n      res.status(201).json({ success: true, user: req.session.user });\n    });\n  } catch (err) {\n    console.error('❌ Signup error:', err.message);\n    res.status(400).json({ success: false, error: err.message });\n  }\n});\n\n\n\nrouter.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    const user = await resolvers.Mutation.login(null, { email, password });\n\n    req.session.user = {\n      id: user.id,\n      email: user.email,\n      name: user.name || null,\n    };\n\n    req.session.save(() => {\n      res.status(200).json({ success: true, user: req.session.user });\n    });\n  } catch (err) {\n    console.error('❌ Login error:', err.message);\n    res.status(401).json({ success: false, error: err.message });\n  }\n});\n\n\nrouter.get('/me', (req, res) => {\n  console.log('🧪 SESSION on /auth/me:', req.session);\n\n  if (req.session.user) {\n    res.json({ success: true, user: req.session.user });\n  } else {\n    res.status(401).json({ success: false, error: 'Not authenticated' });\n  }\n});\n\nrouter.post('/logout', (req, res) => {\n  req.session.destroy(() => {\n    res.clearCookie('sid');\n    res.json({ success: true });\n  });\n});\n\nexport default router;\n"],"mappings":"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","names":["OpenAI","fs","openai","PrismaClient","prisma","Router","router","Router"]}